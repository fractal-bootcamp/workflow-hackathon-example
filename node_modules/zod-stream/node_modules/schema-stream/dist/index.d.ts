import { ZodRawShape, z, ZodObject } from 'zod';

type SchemaType<T extends ZodRawShape = ZodRawShape> = ZodObject<T>;
type TypeDefaults = {
    string?: string | null | undefined;
    number?: number | null | undefined;
    boolean?: boolean | null | undefined;
};
type NestedValue = string | number | boolean | NestedObject | NestedValue[];
type NestedObject = {
    [key: string]: NestedValue;
} & {
    [key: number]: NestedValue;
};
type OnKeyCompleteCallbackParams = {
    activePath: (string | number | undefined)[];
    completedPaths: (string | number | undefined)[][];
};
type OnKeyCompleteCallback = (data: OnKeyCompleteCallbackParams) => void | undefined;
/**
 * `SchemaStream` is a utility for parsing streams of json and
 * providing a safe-to-read-from stubbed version of the data before the stream
 * has fully completed.
 *
 * It uses Zod for schema validation and the Streamparser library for
 * parsing JSON from an input stream.
 *
 * @example
 * ```typescript
 * const schema = z.object({
 *   someString: z.string(),
 *   someNumber: z.number()
 * })
 *
 * const response = await getSomeStreamOfJson()
 * const parser = new SchemaStream(schema)
 * const streamParser = parser.parse()
 *
 * response.body?.pipeThrough(parser)
 *
 * const reader = streamParser.readable.getReader()
 *
 * const decoder = new TextDecoder()
 * let result = {}
 * while (!done) {
 *   const { value, done: doneReading } = await reader.read()
 *   done = doneReading
 *
 *   if (done) {
 *     console.log(result)
 *     break
 *   }
 *
 *   const chunkValue = decoder.decode(value)
 *   result = JSON.parse(chunkValue)
 * }
 * ```
 *
 * @public
 */
declare class SchemaStream {
    private schemaInstance;
    private activePath;
    private completedPaths;
    private onKeyComplete?;
    /**
     * Constructs a new instance of the `SchemaStream` class.
     *
     * @param schema - The Zod schema to use for validation.
     */
    constructor(schema: SchemaType, opts?: {
        defaultData?: NestedObject;
        typeDefaults?: TypeDefaults;
        onKeyComplete?: OnKeyCompleteCallback;
    });
    /**
     * Gets the default value for a given Zod type.
     *
     * Full set of first-party Zod types can be found here:
     * (https://github.com/colinhacks/zod/blob/master/src/types.ts#L4938C1-L4973C1)
     *
     * @param type - The Zod type.
     * @returns The default value for the type.
     */
    private getDefaultValue;
    private createBlankObject;
    private getPathFromStack;
    private handleToken;
    getSchemaStub<T extends ZodRawShape>(schema: SchemaType<T>, defaultData?: NestedObject): z.infer<typeof schema>;
    /**
     * Parses the JSON stream.
     *
     * @param {Object} opts - The options for parsing the JSON stream.
     * @returns A `TransformStream` that can be used to process the JSON data.
     */
    parse(opts?: {
        stringBufferSize?: number;
        handleUnescapedNewLines?: boolean;
    }): TransformStream<any, any>;
}

export { SchemaStream };
